package ${package}.${moduleName}.controller;

import ${package}.${moduleName}.entity.${className};
import ${package}.${moduleName}.service.I${className}Service;
import cn.com.hatech.common.data.result.ResultObject;
import cn.com.hatech.common.data.result.ResultResponse;
import cn.com.hatech.app.dr.config.log.OptionLog;
import cn.com.hatech.common.util.log.OptionType;
import com.github.pagehelper.PageInfo;
import io.swagger.annotations.*;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.Map;

/**
 * @Copyright (C), 2019,北京同创永益科技发展有限公司
 * @ProjectName: hatech
 * @Package:  ${package}.${moduleName}.controller
 * @ClassName: ${className}Controller
 * @Author: ${author}
 * @Description: ${moduleChineseName}控制器
 * @Date: ${datetime}
 * @Version: 1.0
 */
@Api(tags = {"${moduleChineseName}管理"}, description = "${className}Controller")
@RestController
@RequestMapping("${moduleName}/${pathName}")
@Slf4j
public class ${className}Controller {
    /**
     * 系统${moduleChineseName}业务层接口
     */
    @Autowired
    private I${className}Service ${classname}Service;

    @ApiOperation(value = "${moduleChineseName}列表查询接口", httpMethod = "GET", notes = "查询${moduleChineseName}列表信息")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "page", value = "当前页数", defaultValue = "0", dataType = "int", paramType = "query"),
            @ApiImplicitParam(name = "limit", value = "每页条数", defaultValue = "10", dataType = "int", paramType = "query"),
    })
    @GetMapping("select")
    @OptionLog(type = OptionType.SELECT, businessType =OptionType.SELECT, description = "查询${moduleChineseName}列表信息")
    public ResultObject<${className}> select(@ApiParam(hidden = true) @RequestParam Map<String, Object> map) {
        PageInfo<${className}> pageInfo = this.${classname}Service.findAll(map);
        if(pageInfo != null){
            log.info("{}", "查询${moduleChineseName}信息成功");
            return ResultResponse.success("查询${moduleChineseName}成功", pageInfo);
        }
        log.info("{}", "查询${moduleChineseName}信息失败");
        return ResultResponse.error("查询${moduleChineseName}失败");
    }

    @ApiOperation(value = "${moduleChineseName}查询接口", httpMethod = "GET", notes = "根据id查询${moduleChineseName}信息")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "id", value = "${moduleChineseName}id", required = true, dataType = "String", paramType = "query")
    })
    @GetMapping("select/id")
    @OptionLog(type = OptionType.SELECT, businessType = OptionType.SELECT, description = "根据id查询${moduleChineseName}信息")
    public ResultObject<${className}> selectById(@ApiParam(hidden = true) @RequestParam String id) {
        ${className} ${classname} = this.${classname}Service.selectById(id);
        if(${classname} != null){
            log.info("{}", "查询${moduleChineseName}信息成功");
            return ResultResponse.success("查询${moduleChineseName}成功", ${classname});
        }
        log.info("{}", "查询${moduleChineseName}信息失败");
        return ResultResponse.error("查询${moduleChineseName}失败");
    }

    @ApiOperation(value = "${moduleChineseName}编辑接口", httpMethod = "POST", notes = "新增/修改${moduleChineseName}信息")
    @ApiImplicitParams({
    #foreach ($column in $columns)
       @ApiImplicitParam(name = "$column.attrname", value = "$column.comments", required = true, dataType = "$column.attrType", paramType = "query"),
    #end
    })
    @PostMapping("edit")
    @OptionLog(type = OptionType.UPDATE, businessType = OptionType.UPDATE, description = "编辑${moduleChineseName}信息")
    public ResultObject<Object> edit(@ApiParam(hidden = true) @RequestBody Map<String, Object> map) {
        int num = this.${classname}Service.edit(map);
        if(num>0){
            log.info("{}", "编辑${moduleChineseName}成功");
            return  ResultResponse.success("编辑${moduleChineseName}成功");
        }
        log.info("{}", "编辑${moduleChineseName}失败");
        return ResultResponse.error("编辑${moduleChineseName}失败");
    }

    @ApiOperation(value = "${moduleChineseName}删除接口", httpMethod = "POST", notes = "根据${moduleChineseName}id删除${moduleChineseName}")
    @ApiImplicitParam(name = "ids", value = "${moduleChineseName}Id组（比如：ids=id1,id2）", required = true, dataType = "String", paramType = "query")
    @PostMapping("delete")
    @OptionLog(type = OptionType.DELETE, businessType = OptionType.DELETE, description = "根据${moduleChineseName}id删除${moduleChineseName}")
    public ResultObject<String> delete(@ApiParam(hidden = true) @RequestParam String ids) {
        int num = this.${classname}Service.delete(ids);
        if(num > 0){
            log.info("{}", "删除${moduleChineseName}成功");
            return  ResultResponse.success("删除${moduleChineseName}成功", ids);
        }
        log.info("{}", "删除${moduleChineseName}失败");
        return ResultResponse.error("删除${moduleChineseName}失败", ids);
    }
}
